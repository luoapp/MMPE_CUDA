      fctn1(xx)=1./(1.+exp(-xx))
C	  print *,'<envp>nz3, dz=',nz,dz
      pi=acos(-1.)
      tpi=2.*pi
      fk0=tpi*freq/c0

C     Formats for environmental outputs to confirm proper input structure

100   format(1x,///2X,'SOUND SPEED PROFILE AT RANGE =',
     &        F8.2,' km'/6X,'DEPTH(m)',3X,'SSPD(m/s)')
101   format(1x,2F12.2)
110   format(1x///2X,'BOTTOM DEPTH')
111   format(6X,'RANGE(km)',2X,'DEPTH(m)')
112   format(1x,2F12.2)
120   format(1x///2X,'BOTTOM PROPERTIES')
121   format(2X,'RNG(km)',1X,'VEL(m/s)',
     &1X,'GRAD(1/s)',1X,'DENS',1X,'LOSS(dB/km/Hz)',
     &1X,'SHR(m/s)',1X,'SHRLOSS(dB/km/Hz)')
122   format(F7.2,3X,F7.2,3X,F5.2,4X,F4.2,5X,F6.4,
     &2X,F7.2,4X,F6.4)
130   format(1x///2X,'DEEP BOTTOM DEPTH')
140   format(1x///2X,'DEEP BOTTOM PROPERTIES')
150   format(///)
C
C     Read environmental inputs if first pass, otherwise begin at 1000
	  
	  

      IF(istrt.ne.0) goto 1000

      istrt=1
	  print *,'**ENV init**',rng
	  
C	  write (*,'(A)',advance="no"),'0'
C
C     Initialize arrays
      DO k=1,101
        rss(k)=0.
        nssda(k)=0
        DO i=1,512
          ss(i,k)=0.
        END DO
        rdb(k)=0.
        dbd(k)=0.
      END DO
      DO k=1,251
          rb(k)=0.
          bd(k)=0.
      END DO
      nssmax=0
      nbmax=0
      nbp=0
      ndb=0
      ndbp=0

C     Read bathymetry data (upper layer)
      read(11,*)nradb,wradb0
      if(nradb.le.0.or.nradb.gt.512)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NRADB'
       istrt=2
       goto 9999
      end if
C     Use only single radial
      nradb=1
      drad=0.

      bdmax=0.
      read(11,*)nb
      if(nb.le.0.or.nb.gt.250)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NB'
       istrt=2
       goto 9999
      end if
      nbmax=max0(nbmax,nb)

      DO j=1,nb
        read(11,*)rb(j),bd(j)
        bdmax=amax1(bdmax,bd(j))
        if(j.eq.1)then
         if(rb(1).ne.0.)then
          print *,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RB(1)<>0'
          istrt=2
          goto 9999
         end if
        else
         if(rb(j).le.rb(j-1))then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RB(J)<=RB(J-1)'
          istrt=2
          goto 9999
         end if
        end if
      END DO

      if(depcalc.eq.0.)depcalc=2.*bdmax
	  !print *,'nz4=',nz
      if(nz.eq.0)then
	    !print *,'nz5=',nz,dz
        nz=int(2.*depcalc/dz)
        lnz=int(alog(float(nz))/alog(2.)+0.99)
			
	      lnz=lnz+1		
				
				
	else
	    !print *,'nz6=',nz
        lnz=int(alog(float(nz))/alog(2.)+0.99)
				
				lnz=lnz+1
				
				
	end if
	
	       !print*,'--------- nz,lnz',nz,lnz
				 
      if(lnz.gt.15)then
        print*,'Error in nz array size; exceeding max limit.'
        print*,'Setting nz = 32768 (max allowable).'
	  print*,' '
	  lnz=15
      end if
      nz=2**lnz
      dz=2.*depcalc/nz

C     Read bottom properties
      read(12,*)nbp
      if(nbp.le.0.or.nbp.gt.100)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NBP'
       istrt=2
       goto 9999
      end if

      iden=0
      DO j=1,nbp
        read(12,*)rbp(j),bss(j),bg(j),bden(j),blkm(j),bsws(j),bswlkm(j)
        if(bden(j).ne.1.0)iden=iden+1
        if(j.eq.1)then
         if(rbp(1).ne.0.)then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RBP(1)<>0'
          istrt=2
          goto 9999
         end if
        else
         if(rbp(j).le.rbp(j-1))then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RBP(J)<=RBP(J-1)'
          istrt=2
          goto 9999
         end if
        end if
      END DO

C     Read bathymetry data (lower layer)
      read(13,*)ndb
      if(ndb.lt.0.or.ndb.gt.100)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NDB'
       istrt=2
       goto 9999
      end if

      DO j=1,ndb
        read(13,*)rdb(j),dbd(j)
        if(j.eq.1)then
         if(rdb(1).ne.0.)then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RDB(1)<>0'
          istrt=2
          goto 9999
         end if
        else
         if(rdb(j).le.rdb(j-1))then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RDB(J)<=RDB(J-1)'
          istrt=2
          goto 9999
         end if
        end if
      END DO

C     Read lower layer bottom properties
      IF(ndb.gt.0)THEN
      read(14,*)ndbp
      if(ndbp.lt.0.or.ndbp.gt.100)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NDBP'
       istrt=2
       goto 9999
      end if

      DO j=1,ndbp
        read(14,*)rdbp(j),dbss(j),dbg(j),dbden(j),dblkm(j),dbsws(j),
     &  dbswlkm(j)
        if(dbden(j).ne.1.0)iden=iden+1
        if(j.eq.1)then
         if(rdbp(1).ne.0.)then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RDBP(1)<>0'
          istrt=2
          goto 9999
         end if
        else
         if(rdbp(j).le.rdbp(j-1))then
        print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RDBP(J)<=RDBP(J-1)'
          istrt=2
          goto 9999
         end if
        end if
      END DO
      END IF
C
200   if(ndb.eq.0)then
        ndb=1
        rdb(1)=0.
        dbd(1)=depcalc
      end if

C     Read sound speed data
      read(10,*)nradss,wradss0
      if(nradss.le.0.or.nradss.gt.512)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NRADSS'
       istrt=2
       goto 9999
      end if
C     Use only single radial
      nradss=1

      read(10,*)nss
      if(nss.le.0.or.nss.gt.250)then
       print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NSS'
       istrt=2
       goto 9999
      end if
C
      DO j=1,nss
        read(10,*)rss(j),nssda(j)
        if(j.eq.1)then
         if(rss(1).ne.0.)then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RSS(1)<>0'
          istrt=2
          goto 9999
         end if
        else
         if(rss(j).le.rss(j-1))then
          print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: RSS(J)<=RSS(J-1)'
          istrt=2
          goto 9999
         end if
        end if
        nssmax=max0(nssmax,nss)
        nssd=nssda(j)
        if(nssd.gt.512)then
         print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: NSSD'
         istrt=2
         goto 9999
        end if
        DO k=1,nssd
          read(10,*)ssd(k,j),ss(k,j)
          if(k.eq.1)then
           if(ssd(1,j).ne.0.)then
            print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: SSD(1,J)<>0'
            istrt=2
            goto 9999
           end if
          else
           if(ssd(k,j).le.ssd(k-1,j))then
      print*,'ERROR IN ENVIRONMENTAL INPUT FORMAT: SSD(K,J)<=SSD(K-1,J)'
            istrt=2
            goto 9999
           end if
          end if
        END DO
        if(ssd(nssd,j).lt.depcalc)then
          nssda(j)=nssda(j)+1
          ssd(nssd+1,j)=depcalc
          if(nssd.gt.1)then
            ss(nssd+1,j)=ss(nssd,j)+(ssd(nssd+1,j)-
     &ssd(nssd,j))*(ss(nssd,j)-ss(nssd-1,j))/
     &(ssd(nssd,j)-ssd(nssd-1,j))
          else
            ss(nssd+1,j)=ss(nssd,j)
          end if
        end if
      END DO

C     Check for any density contrasts.  Verify depth mesh is adequate.
      if((iden.ne.0).and.(dz.gt.(c0/freq)))then
        print*,'WARNING:  DEPTH MESH MAY NOT BE SMALL ENOUGH'
        print*,'TO ADEQUATELY MODEL DENSITY DISCONTINUITIES.'
      end if

C     Check if range-independent, then ird=1.
C      ird=max0(nssmax,nbmax,nbp,ndb,ndbp)
C	Force range-dependence for perturbations
	ird=2
C     Determine number of radials
      nrad=max0(nradss,nradb)

C
C     Output first and last environmental profiles to log file for checking
C     and extend all data beyond final ranges and depths
C
      DO k=1,nss
        if(k.eq.1.or.k.eq.nss)then
          nssd=nssda(k)
          write(9,100)rss(k)
          DO j=1,nssd
            if(amod(float(j),amax0(int(float(nssd)/20.),1)).eq.0.)
     &        write(9,101)ssd(j,k),ss(j,k)
          END DO
        end if
        rss(k)=1000.*rss(k)
      END DO

      DO j=1,nssda(nss)
        ss(j,nss+1)=ss(j,nss)
        ssd(j,nss+1)=ssd(j,nss)
      END DO
      nssda(nss+1)=nssda(nss)
      rss(nss+1)=1.e20
      nss=nss+1

C
      write(9,110)
      write(9,111)
       DO k=1,nb
        if((k.eq.1.or.k.eq.nb))then
          write(9,112)rb(k),bd(k)
        end if
        rb(k)=1000.*rb(k)
       END DO
       rb(nb+1)=1.e20
       bd(nb+1)=bd(nb)
       nb=nb+1

C
      write(9,120)
      write(9,121)
      DO k=1,nbp
        if(k.eq.1.or.k.eq.nbp)write(9,122)rbp(k),bss(k),bg(k),
     &   bden(k),blkm(k),bsws(k),bswlkm(k)
        rbp(k)=1000.*rbp(k)
      END DO
      rbp(nbp+1)=1.e20
      bss(nbp+1)=bss(nbp)
      bden(nbp+1)=bden(nbp)
      blkm(nbp+1)=blkm(nbp)
      bg(nbp+1)=bg(nbp)
      bsws(nbp+1)=bsws(nbp)
      bswlkm(nbp+1)=bswlkm(nbp)
      nbp=nbp+1

C
      if(ndb.gt.1.or.dbd(1).lt.depcalc)then
       write(9,130)
       write(9,111)
      end if
      DO k=1,ndb
        if(ndb.gt.1.or.dbd(1).lt.depcalc)then
         if(k.eq.1.or.k.eq.ndb)write(9,112)rdb(k),dbd(k)
        end if
        rdb(k)=1000.*rdb(k)
      END DO

C
      if(ndb.gt.1.or.dbd(1).lt.depcalc)then
       write(9,140)
       write(9,121)
      end if
      DO k=1,ndbp
        if(ndb.gt.1.or.dbd(1).lt.depcalc)then
         if(k.eq.1.or.k.eq.ndbp)write(9,122)rdbp(k),dbss(k),dbg(k),
     &    dbden(k),dblkm(k),dbsws(k),dbswlkm(k)
        end if
        rdbp(k)=1000.*rdbp(k)
      END DO

C
      rdb(ndb+1)=1.e20
      dbd(ndb+1)=dbd(ndb)
      ndb=ndb+1
      rdbp(ndbp+1)=1.e20
      dbss(ndbp+1)=dbss(ndbp)
      dbden(ndbp+1)=dbden(ndbp)
      dblkm(ndbp+1)=dblkm(ndbp)
      dbg(ndbp+1)=dbg(ndbp)
      dbsws(ndbp+1)=dbsws(ndbp)
      dbswlkm(ndbp+1)=dbswlkm(ndbp)
      ndbp=ndbp+1

C
      write(9,150)

C     Create filter over 1/3 end of vector - need to make maxdep>2*botdep
      nz2=nz/2
      nz2p1=nz2+1
      nz3=nz2/3
      do iz=1,nz2p1
        fj=float(nz2p1-iz)/float(nz3)
        arg=amin1(1.,fj)*pi
        cosa=cos(arg)
C        filt(iz)= 0.125*(1.0-cosa)+0.75
        filt(iz)= 0.25*(1.0-cosa)+0.5
      end do  
      
C ----------------------------------------------------------------------
C	Read in Rough Surface Data
C -------------------------------------------------------------------	
	open(1001,file='surf.dat',status='unknown')
	open(1002,file='der_surf.dat',status='unknown')
	open(1003,file='der2_surf.dat',status='unknown')
      open(1004,file='checksurface',status='unknown')
      sigsmax=1
22    format(a80)
   	do i=1,int(rngmax/dr)
	 read(1001,*,end=20) etas(i)
C	 print*,i,etas(i)
	 read(1002,*,end=20) detas(i)
	 read(1003,*,end=20) d2etas(i)
	enddo
20	continue
	close(1001)
	close(1002)
	close(1003)
c
c -----------------------------------------------------------------------
c	print*,'Enter surface wave speed (m/s): '
c	read*,vw
c	print*,'Enter time of surface realization (s): '
c	read*,tj
C
1000  CONTINUE


	  

C      NOTE: After initialization, this subroutine begins here.
	  !write (*,'(A)',advance="no"),'E'
C      Define mixing lengths
      wvln=tpi/fk0
      xldmin=dz*5.0
      xld=amax1(xldmin,2.*wvln)
      xldsq=xld*xld
      xlmin=dz*1.0
      xl=amax1(xlmin,0.1*wvln)

C     Compute water volume loss coefficients
      conv=1.094/(1000.0*8.686)
      fsq=(freq/1.e3)**2
      ALPHA0=0.003+0.1*fsq/(1.+fsq)+40.*fsq/(4100.+fsq)+2.75e-4*fsq
      ALPHA0=conv*ALPHA0
	  !print *,'e2 cuda error',istat,cudaGetErrorString(cudaGetLastError()) 
	  !if (envinit == 0) then
	    envinit = 1
	    blockdim = 512
	    griddim = ceiling( real(nz)/real(blockdim))
		nz2_d(1) = nz2;
		dz_d(1) = dz;  
		wvln_d(1)=wvln; 
		c0_d(1)=c0; 
		filt_d = filt; 
		 
		ALPHA0_d(1) = ALPHA0; 
		fk0_d(1)=fk0;
		dr_d(1)=dr;
	  !end if
C      ALPHA0=0.
C
C	NOTE:  If rng=0, subroutine only called for irad=1
       
      if( abs(rng).le.1e-9)then
	    !write (*,'(A)',advance="no"),'A'
        iss=1
        nssd=nssda(iss)
        rss2=rss(iss)
        CALL SSI(ss(1,iss),ssd(1,iss),nssd,ss2(1))
        ib=1
        rb2=rb(ib)
       ibp=1
       idb=1
       idbp=1
       rbp2=rbp(ibp)
       rdb2=rdb(idb)
       rdbp2=rdbp(idbp)
       do j=1,nbp
         bl(j)=blkm(j)/(1000.0*8.686)*freq
         bswl(j)=bswlkm(j)/(1000.0*8.686)*freq
       end do
       do j=1,ndbp
         dbl(j)=dblkm(j)/(1000.0*8.686)*freq
         dbswl(j)=dbswlkm(j)/(1000.0*8.686)*freq
       end do
      end if
	  !print *,rdb
	  !stop
C
C
1009  continue
      !print *,'idb',idb,rdb(1:5)
	  !print *,'iss',iss,rss(1:5)
	   
      !write (*,'(A)',advance="no"),'2' 
	 
	  
	  
	  
	   

      if(rng.lt.rss2) goto 1020
      iss=iss+1
	  
C
C     Update profile values for water column
      rss1=rss2
      rss2=rss(iss)
      nssd=nssda(iss)
	  
      DO 1010 i=1,nz2
1010  ss1(i)=ss2(i)

	  !ss1=ss2
	  !write (*,'(A)',advance="no"),'3'
      CALL SSI(ss(1,iss),ssd(1,iss),nssd,ss2(1))
	  goto 1009
C
1020  continue
	  
	  

	   ib_t = 1
	  do while(rng>=rb(ib_t))
	    ib_t=ib_t+1
		end do
	  

	   rb2_t=rb(ib_t)
	   if(ib_t==1) then
	   rb1_t=0
	   else
	     rb1_t = rb(ib_t-1)
		 end if


 


      if(rng.lt.rb2) goto 1030
      ib=ib+1
	  
	  !write (*,'(A)',advance="no"),'4'
C
C     Update values for bathymetry (upper)
      rb1=rb2
      rb2=rb(ib)
      goto 1020
C
1030  continue
	  
      if(rng.lt.rbp2) goto 1040
      ibp=ibp+1
	  
C
C     Update values for bottom (upper) properties
      rbp1=rbp2
      rbp2=rbp(ibp)
      goto 1030
C

1040  continue
	  !print *,'++',rng,rdb2,idb,rdb(1:5)
	  !stop
      if(rng.lt.rdb2) goto 1050
      idb=idb+1
C
C     Update values for deep bottom layer
      rdb1=rdb2
      rdb2=rdb(idb)
	  
	  !print *,'+++',rng,rdb2
	  if (idb>4) then
	   print *,idb
	   stop
	  end if
      
	  goto 1040
C
1050  continue
      if(rng.lt.rdbp2) goto 1060
      idbp=idbp+1
C
C     Update values for deep bottom properties
      rdbp1=rdbp2
      rdbp2=rdbp(idbp)
      goto 1050
C
C     Compute interpolation values
C
1060  continue
	  !print *,counter(9)
	  !return !time=4.99(3000run)
	  
	  if (rb2.ne.rb2_t .and. rb1.ne.rb1_t) then
	   print *,'rb2',rng, rb1,rb1_t,rb2,rb2_t,ib_t,rb(1:5)
	   stop
	  end if
	  

      fss=(rng-rss1)/(rss2-rss1)
      fb=(rng-rb1)/(rb2-rb1)
      fbp=(rng-rbp1)/(rbp2-rbp1)
      fdb=(rng-rdb1)/(rdb2-rdb1)
      fdbp=(rng-rdbp1)/(rdbp2-rdbp1)