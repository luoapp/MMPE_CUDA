!
!  PE_kernel.cuf
!
!  CUDA Fortran Source File 
!  Generated by PGI Visual Fortran(R)
!  3/6/2012 3:58:34 PM
!

attributes(global) subroutine kfunc0(n,a)
	integer*4, value :: i
	integer*4, dimension(*)::n
	complex, dimension(*)::a
	i= (blockidx%x-1)*blockdim%x + threadidx%x
	a(2)=n(1)
	
end subroutine

attributes(global) subroutine kfunc1(n, a, x, y)
!a = complex(x,y)
	real, dimension(*) :: x,y
	complex, dimension(*) :: a
	integer*4, dimension(*) :: n
	integer, value :: i
	i = (blockidx%x-1)*blockdim%x + threadidx%x
	if (i <= n(1)) a(i) = CMPLX(x(i),y(i))
	
end subroutine

attributes(global) subroutine kfunc2(n, a, x, y)
! x = real(a); y= imag(a)
	real, dimension(*) :: x,y
	complex, dimension(*) :: a
	integer, value :: n,i
	i = (blockidx%x-1)*blockdim%x + threadidx%x
	if (i <= n) then
	    x(i)=REAL(a(i))
        y(i)=AIMAG(a(i))
	end if
end subroutine



attributes(global) subroutine kfunc3(n, a, b)
!		 DO iz=1,nz
!          tmp=phsr(iz)*psir(iz)+phsi(iz)*psii(iz)
!          psii(iz)=-phsr(iz)*psii(iz)+phsi(iz)*psir(iz)
!          psir(iz)=tmp
!        END DO

! == { a = conj(a)*b }
	
	complex,device, dimension(*) :: a,b
	integer, dimension(*) :: n
	integer, value :: i
	i = (blockidx%x-1)*blockdim%x + threadidx%x
	if (i <= n(1)) then
		a(i) = conjg(a(i))*b(i)
	end if
end subroutine


attributes(global) subroutine kfunc4(nz, rsint, fk0,fk_d, psis, psi)
  implicit none
!	    psirs(1)=psir(1)
!	    psiis(1)=psii(1)
!	    DO iz=2,nz
!	      retas=2.0*rsint*fk0*fk(iz)
!	      jz=nz-iz+2
!	      cks=cos(retas)
!	      sks=sin(retas)
!	      psirs(jz)=psir(iz)*cks-psii(iz)*sks
!	      psiis(jz)=psii(iz)*cks+psir(iz)*sks
!	    END DO
	complex, device, dimension(*) :: psis, psi
	real, dimension(*):: rsint, fk0,fk_d
	integer, dimension(*)::nz
	
	integer, value :: iz
	real :: retas, cks, sks

	
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if(iz==1) then
		psis(1) = psi(1)
	else if (iz<=nz(1)) then
		retas = 2.0*rsint(1)*fk0(1)*fk_d(iz)
		cks = cos(retas)
		sks = sin(retas)

		psis(nz(1)-iz+2) = psi(iz)*cmplx(cks,sks)
	end if

	!psis(1) = cos(cu_r1(1)*fk_d(1))
end subroutine

attributes(global) subroutine kfunc5(nz, envr2, envi2,  env2, psi0)
	implicit none
!	   env2 = cmplx(envr2, envi2)
!
! 
!	   nz2 = nz/2
!      DO iz=1,nz2
!        tmp=envr2(iz)*psir0(iz)-envi2(iz)*psii0(iz)
!        psii0(iz)=-(envr2(iz)*psii0(iz)+envi2(iz)*psir0(iz))
!        psir0(iz)=tmp
!        psir0(nz-iz+1)=-psir0(iz)
!        psii0(nz-iz+1)=-psii0(iz)
!      END DO
	integer, dimension(*):: nz
	complex, dimension(*) ::  env2, psi0
	real, dimension(*)::envr2, envi2
	integer, value::  nz2, iz
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	nz2 = nz(1)/2

	if (iz<=nz(1)) then
		env2(iz) = cmplx(envr2(iz),envi2(iz))
	  if (iz<=nz2 ) then
		psi0(iz) = conjg(env2(iz))*conjg(psi0(iz))
		psi0(nz(1)-iz+1) = -psi0(iz)
	 end if
	end if
end subroutine
	     
attributes(global) subroutine kfunc6(nz, fk0, rsdotint, depth,rsint, psis)
!DO iz=1,nz
!	      retasdot=2.0*fk0*rsdotint*(depth(iz)-rsint)
!	      cms=cos(retasdot)
!	      sms=sin(retasdot)
!	      tmp=-(cms*psirs(iz)-sms*psiis(iz))
!	      psiis(iz)=-(sms*psirs(iz)+cms*psiis(iz))
!	      psirs(iz)=tmp
!   END DO
	complex, device, dimension(*) :: psis
	real, dimension(*):: rsdotint, depth,rsint, fk0
	integer, dimension(*)::nz

	integer, value :: iz
	real :: retasdot, cms, sms

	
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=nz(1)) then
	  retasdot = 2.0*fk0(1)*rsdotint(1)*(depth(iz)-rsint(1))
	  psis(iz) = -psis(iz)*cmplx(cos(retasdot),sin(retasdot))

	  
    end if
end subroutine

attributes(global) subroutine kfunc6v2(nz, fk0, rsdotint, depth,rsint, psis,psi,dz)
!DO iz=1,nz
!	      retasdot=2.0*fk0*rsdotint*(depth(iz)-rsint)
!	      cms=cos(retasdot)
!	      sms=sin(retasdot)
!	      tmp=-(cms*psirs(iz)-sms*psiis(iz))
!	      psiis(iz)=-(sms*psirs(iz)+cms*psiis(iz))
!	      psirs(iz)=tmp
!   END DO
	complex, device, dimension(*) :: psis,psi
	real, dimension(*):: rsdotint, depth,rsint, fk0,dz
	integer, dimension(*)::nz
	integer::ns
	
	integer, value :: iz
	real :: retasdot, cms, sms

	
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=nz(1)) then
	  retasdot = 2.0*fk0(1)*rsdotint(1)*(depth(iz)-rsint(1))
	  psis(iz) = -psis(iz)*cmplx(cos(retasdot),sin(retasdot))
    end if
	
	
	if(rsint(1)>0) then
		ns = int(rsint(1)/dz(1)+0.5)
	else
		ns = int(rsint(1)/dz(1)-0.5)
	end if
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (ns>0) then
	if (iz<=ns) then
	  psi(iz) = psis(iz)
    end if
	end if
	
	ns = min(0,ns)
	if ( iz>=nz(1)/2+1 .and. iz<=nz(1)+ns ) then
	  psi(iz) = psis(iz)
	end if
end subroutine


attributes(global) subroutine kfunc7(ns,psi,psis)

! do iz=1,ns
!	    psir(iz)=psirs(iz)
!       psii(iz)=psiis(iz)
! end do
	complex, device, dimension(*) :: psis,psi
	integer, dimension(*)::ns
	integer, value :: iz
	
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=ns(1)) then
	  psi(iz) = psis(iz)
    end if
end subroutine



attributes(global) subroutine kfunc7v2(rsint,dz,psi,psis,nz)
!if(rsint.gt.0.)then
!	      ns=int(rsint/dz+0.5)
!	    else
!	      ns=int(rsint/dz-0.5)
!	    end if
!if(ns.gt.0)then
! do iz=1,ns
!	    psir(iz)=psirs(iz)
!       psii(iz)=psiis(iz)
! end do
!end if
!	    ns=amin0(0,ns)
!	    do iz=nz/2+1,nz+ns
!CC	      psir(iz)=psirs(iz)
!CC	      psii(iz)=psiis(iz)
!CC	    end do
	complex, device, dimension(*) :: psis,psi
	real,dimension(*)::rsint,dz
	integer::ns
	integer, value :: iz
	integer, dimension(*)::nz
	if(rsint(1)>0) then
		ns = int(rsint(1)/dz(1)+0.5)
	else
		ns = int(rsint(1)/dz(1)-0.5)
	end if
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (ns>0) then
	if (iz<=ns) then
	  psi(iz) = psis(iz)
    end if
	end if
	
	ns = min(0,ns)
	if ( iz>=nz(1)/2+1 .and. iz<=nz(1)+ns ) then
	  psi(iz) = psis(iz)
	end if
end subroutine

attributes(global) subroutine kfunc8(ns,nz,psi,psis)
!do iz=nz/2+1,nz+ns
!	      psir(iz)=psirs(iz)
!	      psii(iz)=psiis(iz)
!	    end do
	complex, device, dimension(*) :: psis,psi
	integer, dimension(*)::ns,nz
	integer, value :: iz
	
	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if ( (iz<=ns(1)+nz(1)) .and. (iz>=nz(1)/2+1) ) then
	  psi(iz) = psis(iz)
	end if
end subroutine


attributes(global) subroutine kfunc9(nz, envr2, envi2,  env2, psi)
!DO iz=1,nz
!          tmp=envr2(iz)*psir(iz)-envi2(iz)*psii(iz)
!          psii(iz)=envr2(iz)*psii(iz)+envi2(iz)*psir(iz)
!          psir(iz)=tmp
!        END DO
	integer, dimension(*):: nz
	complex, dimension(*) ::  env2, psi
	real, dimension(*)::envr2, envi2
	integer, value::  iz

	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=nz(1)) then
		env2(iz) = cmplx(envr2(iz),envi2(iz))
		psi(iz) = env2(iz) * psi(iz)
	end if
end subroutine


attributes(global) subroutine kfunc9v2(nz, envr2, envi2,  env2,&
  psi,psir,psii)
!DO iz=1,nz
!          tmp=envr2(iz)*psir(iz)-envi2(iz)*psii(iz)
!          psii(iz)=envr2(iz)*psii(iz)+envi2(iz)*psir(iz)
!          psir(iz)=tmp
!        END DO
	integer, dimension(*):: nz
	complex, dimension(*) ::  env2, psi
	real, dimension(*)::envr2, envi2,psir,psii
	integer, value::  iz

	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=nz(1)) then
		env2(iz) = cmplx(envr2(iz),envi2(iz))
		psi(iz) = env2(iz) * psi(iz)
		psir(iz) = real(psi(iz))
		psii(iz) = aimag(psi(iz))
	end if
end subroutine

attributes(global) subroutine kfunc10(nz, envr2, envi2,  env2, psi)
!     DO iz=1,nz
!          tmp=envr2(iz)*psir(iz)-envi2(iz)*psii(iz)
!          psii(iz)=-(envr2(iz)*psii(iz)+
!     &                     envi2(iz)*psir(iz))
!          psir(iz)=tmp
!        END DO
	integer, dimension(*):: nz
	complex, dimension(*) ::  env2, psi
	real, dimension(*)::envr2, envi2
	integer, value::  iz

	iz = (blockidx%x-1)*blockdim%x + threadidx%x
	if (iz<=nz(1)) then
		env2(iz) = cmplx(envr2(iz),envi2(iz))
		psi(iz) = conjg(env2(iz)) *conjg( psi(iz))
	end if
end subroutine 

attributes(global) subroutine kfunc11(n, a, x, y)
!x = real(a)
!y = aimag(a)
	real, dimension(*) :: x,y
	complex, dimension(*) :: a
	integer*4, dimension(*) :: n
	integer, value :: i
	i = (blockidx%x-1)*blockdim%x + threadidx%x
	if (i <= n(1)) then
	 x(i) = real(a(i))
	 y(i) = aimag(a(i))
	end if
end subroutine