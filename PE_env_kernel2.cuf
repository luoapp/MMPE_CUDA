!
!  envfun.f90
!
!  Free-Format Fortran Source File 
!  Generated by PGI Visual Fortran(R)
!  3/25/2012 2:56:01 AM
!
attributes(global) subroutine envfunc0(fss_a,fb_a,fbp_a,fdb_a,fdbp_a,ss1,ss2,dbdint,&
  bdint, dz, dbsint_a, dbssrint_a,fk0,freq,depcalc,ib_a,ibp_a,idb_a,idbp_a,&
  sigsmax,rng_a,dr,etas,detas,d2etas,bd,bss,bg,blkm,bl,&
  bden,bsws,bswlkm,bswl,rdb,dbd,rdbp,dbss,dbg,dblkm,dbl,&
  dbden,dbsws,dbswlkm,dbswl,nz2,nz,&
  ssint,rsint,rsdotint,rsdot2int,&
  bssint,bgint,blint,dbssint,dbgint,dblint,udb0,ub0,ith )
!implicit none
!input 
!!real:: rss1,rss2,rb1,rb2,rbp1,rbp2,rdb1,rdb2,rdbp1,rdbp2
real,dimension(*):: fss_a,fb_a,fbp_a,fdb_a,fdbp_a  
real,dimension(*):: ss1, ss2
real,dimension(*):: dbsint_a, dbssrint_a,rng_a
integer,dimension(*):: ib_a,ibp_a,idbp_a,idb_a
integer:: ith

!input shared between threads
real:: sigsmax,dr,etas(32768),detas(32768),d2etas(32768),fk0,freq,depcalc
real:: bd(251),bss(101),bg(101),blkm(101),bl(101),bden(101),bsws(101),bswlkm(101),bswl(101)
real:: rdb(101),dbd(101),rdbp(101),dbss(101),dbg(101),dblkm(101),dbl(101),dbden(101),dbsws(101),dbswlkm(101),dbswl(101),dz

integer:: nz2,nz
!common  nz,dz,dr,rng,freq,depcalc,bdint,dbdint,rsint,rsdotint

!output
real::ssint(nz2)
real::rsint,rsdotint,rsdot2int
real::bdint,dbdint,bssint,bgint,blint,dbssint,dbgint,dblint,udb0,ub0
!integer::i2

!local
!real::
integer:: ndbi
integer, save:: c9=0
real:: tpi

real :: fss,fb ,fbp ,fdb ,fdbp   
real :: dbsint , dbssrint ,rng 
integer:: ib ,ibp ,idbp 
!env_kernel input: nz2_d,dz_d,ALPHA0_d, &
!  bdint_d, dbdint_d,bssint_d,bgint_d,wvln_d, ssint,blint_d,&
!ub0_d,depcalc_d,dbssint_d,dbgint_d,dblint_d,udb0_d,ang,aloss,&
  !filt,envr,envi,envr2,envi2,c0_d,dr_d,fk0_d,rsint_d,rsdot2int_d)
  
tpi = 2*3.14159265;

	  fss=fss_a(ith)
	  fb=fb_a(ith)
	  fdb=fdb_a(ith)
	  fdbp=fdbp_a(ith) 
	  dbssrint=dbssrint_a(ith)
	  dbsint=dbsint_a(ith)
	  rng=rng_a(ith)
	  ib=ib_a(ith)
	  ibp=ibp_a(ith)
	  idbp=idbp_a(ith)
	  idb=idb_a(ith)
	  
 
if(sigsmax.ne.0.)then !sigsmax =1

	  irtmp=int(rng/dr)+1
	  
	  rsint=etas(irtmp)
!	  print*,rsint
!	  stop
	  rsdotint=detas(irtmp)
	  rsdot2int=d2etas(irtmp)
end if


!
      bdint=bd(ib-1)+fb*(bd(ib)-bd(ib-1))
!
      bssint=bss(ibp-1)+fbp*(bss(ibp)-bss(ibp-1))
      bgint=bg(ibp-1)+fbp*(bg(ibp)-bg(ibp-1))
      blint=bl(ibp-1)+fbp*(bl(ibp)-bl(ibp-1))
      bdenint=bden(ibp-1)+fbp*(bden(ibp)-bden(ibp-1))
      bsint=bsws(ibp-1)+fbp*(bsws(ibp)-bsws(ibp-1))
      bswlint=bswl(ibp-1)+fbp*(bswl(ibp)-bswl(ibp-1))
!
      dbdint=dbd(idb-1)+fdb*(dbd(idb)-dbd(idb-1))
!
      dbssint=dbss(idbp-1)+fdbp*(dbss(idbp)-dbss(idbp-1))
      dbgint=dbg(idbp-1)+fdbp*(dbg(idbp)-dbg(idbp-1))
      dblint=dbl(idbp-1)+fdbp*(dbl(idbp)-dbl(idbp-1))
      dbdenint=dbden(idbp-1)+fdbp*(dbden(idbp)-dbden(idbp-1))
      dbsint=dbsws(idbp-1)+fdbp*(dbsws(idbp)-dbsws(idbp-1))
      dbswlint=dbswl(idbp-1)+fdbp*(dbswl(idbp)-dbswl(idbp-1))
!
!     Compute updated sound speed profile in water column
	   DO i=1,nz2
         ssint(i)=ss1(i)+fss*(ss2(i)-ss1(i))
	   END DO
	   
!     Convert shear wave effect into effective bottom loss
      eqbl=0.
      eqdbl=0.
      if(dbdint.le.bdint)then
        ndbi=int(1.+dbdint/dz)
		ssdbw=ssint(ndbi)
        dbssrint=dbssint/ssdbw
       if((dbsint.gt.0.).and.(dbssrint.gt.1.))then
        dblfact=4.*dbsint**3.*(dbssint**2.-ssdbw**2.)/(dbssint*ssdbw**2)
        dblfact=dblfact/(ssdbw**2.-2.*dbsint**2.)
        eqdbl=freq*tpi*sqrt(ssdbw**2.-dbsint**2.)
	  eqdbl=eqdbl/(dbssint*(ssdbw**2.-2.*dbsint**2.))
        eqdbl=(eqdbl+2.*dbswlint)*dblfact
        dbdenint=dbdenint*(1.-2.*(dbsint/ssdbw)**2.)**2.
        dbdfct=((dblint+eqdbl)*ssdbw)**2.*(1.+2.*(ssdbw/dbssint)**2.)
        dbdfct=dbdfct/(2.*(freq*tpi)**2.*(1.-(ssdbw/dbssint)**2.)**2.)
        dbdenint=dbdenint/(1.-dbdfct)
       end if
	    dbrod=(sqrt(amax1(0.,dbdenint))-1.)
        dbrod=dbrod/(sqrt(amax1(0.,dbdenint))+1.)
      else
        nbi=int(1.+bdint/dz)
        ssbw=ssint(nbi)
        bssrint=bssint/ssbw
		
       if((bsint.gt.0.).and.(bssrint.gt.1.))then
        blfact=4.*bsint**3.*(bssint**2.-ssbw**2.)/(bssint*ssbw**2)
        blfact=blfact/(ssbw**2.-2.*bsint**2.)
        eqbl=freq*tpi*sqrt(ssbw**2.-bsint**2.)
	  eqbl=eqbl/(bssint*(ssbw**2.-2.*bsint**2.))
        eqbl=(eqbl+2.*bswlint)*blfact
        bdenint=bdenint*(1.-2.*(bsint/ssbw)**2.)**2.
        bdfct=((blint+eqbl)*ssbw)**2.*(1.+2.*(ssbw/bssint)**2.)
		 
        bdfct=bdfct/(2.*(freq*tpi)**2.*(1.-(ssbw/bssint)**2.)**2.)
		 
        bdenint=bdenint/(1.-bdfct)

       end if
	   
        brod=(sqrt(amax1(0.,bdenint))-1.)
        brod=brod/(sqrt(amax1(0.,bdenint))+1.)
		
!
       if(dbdint.lt.depcalc)then
        bdbssint=bssint+bgint*(dbdint-bdint)
        bdbssrint=dbssint/bdbssint
       if((dbsint.gt.0.).and.(bdbssrint.gt.1.))then
        dblfact=4.*dbsint**3.*(dbssint**2.-bdbssint**2.)
	  dblfact=dblfact/(dbssint*bdbssint**2)
        dblfact=dblfact/(bdbssint**2.-2.*dbsint**2.)
        eqdbl=freq*tpi*sqrt(bdbssint**2.-dbsint**2.)
	  eqdbl=eqdbl/(dbssint*(bdbssint**2.-2.*dbsint**2.))
        eqdbl=(eqdbl+2.*dbswlint)*dblfact
        dbdenint=dbdenint*(1.-2.*(dbsint/bdbssint)**2.)**2.
        dbdfct=((dblint+eqdbl)*bdbssint)**2.
	  dbdfct=dbdfct*(1.+2.*(bdbssint/dbssint)**2.)
        dbdfct=dbdfct/(2.*(freq*tpi)**2.*(1.-(bdbssint/dbssint)**2.)**2)
        dbdenint=dbdenint/(1.-dbdfct)
       end if
        dbrod=(sqrt(amax1(0.,(bdenint/dbdenint)))-1.)
		
        dbrod=dbrod/(sqrt(amax1(0.,(bdenint/dbdenint)))+1.)
       end if
      end if
      blint=blint+eqbl
      dblint=dblint+eqdbl

!
      ub0=-brod/(fk0*fk0)
      udb0=-dbrod/(fk0*fk0)
!
      
end subroutine


